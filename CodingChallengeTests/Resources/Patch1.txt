@@ -2,132 +2,149 @@\n \n #### Basic Finding\n \n-Most methods in MagicalRecord return an NSArray of results. So, if you have an Entity called Person, related to a Department (as seen in various Apple Core Data documentation), to get all the Person entities from your Persistent Store:\n+Most methods in MagicalRecord return an `NSArray` of results.\n \n-\t//In order for this to work you need to add \"#define MR_SHORTHAND\" to your PCH file\n-\tNSArray *people = [Person findAll];\n+Say you have an Entity called \"Person\", related to a Department (as seen in various Apple Core Data documentation). To get all of the Person entities from your Persistent Store, use the following method:\n \n-\t// Otherwise you can use the longer, namespaced version\n-\tNSArray *people = [Person MR_findAll];\n+```objective-c\n+NSArray *people = [Person MR_findAll];\n+```\n \n-Or, to have the results sorted by a property:\n+Or, to return the results sorted by a property:\n \n-\tNSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName\" ascending:YES];\n+```objective-c\n+NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName\" ascending:YES];\n+```\n \n-Or, to have the results sorted by multiple properties:\n+Or, to return the results sorted by multiple properties:\n \n-        NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName,FirstName\" ascending:YES];\n+```objective-c\n+NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName,FirstName\" ascending:YES];\n+```\n \n-Or, to have the results sorted by multiple properties with difference attributes - will default to whatever you set it to:\n+Or, to return the results sorted by multiple properties with different attributes (these will default to whatever you set them to):\n \n-        NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName:NO,FirstName\" ascending:YES];\n+```objective-c\n+NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName:NO,FirstName\" ascending:YES];\n \n-        NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName,FirstName:YES\" ascending:NO];\n+// OR\n \n-If you have a unique way of retrieving a single object from your data store, you can get that object directly:\n+NSArray *peopleSorted = [Person MR_findAllSortedBy:@\"LastName,FirstName:YES\" ascending:NO];\n+```\n \n-\tPerson *person = [Person MR_findFirstByAttribute:@\"FirstName\" withValue:@\"Forrest\"];\n+If you have a unique way of retrieving a single object from your data store (such as via an identifier), you can use the following method:\n+\n+```objective-c\n+Person *person = [Person MR_findFirstByAttribute:@\"FirstName\" withValue:@\"Forrest\"];\n+```\n \n #### Advanced Finding\n \n If you want to be more specific with your search, you can send in a predicate:\n \n-\tNSArray *departments = [NSArray arrayWithObjects:dept1, dept2, ..., nil];\n-\tNSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", departments];\n-\n-\tNSArray *people = [Person MR_findAllWithPredicate:peopleFilter];\n+```objective-c\n+NSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", @[dept1, dept2]];\n+NSArray *people = [Person MR_findAllWithPredicate:peopleFilter];\n+```\n \n #### Returning an NSFetchRequest\n \n-\tNSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", departments];\n-\n-\tNSArray *people = [Person MR_findAllWithPredicate:peopleFilter];\n+```objective-c\n+NSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", departments];\n+NSFetchRequest *people = [Person MR_requestAllWithPredicate:peopleFilter];\n+```\n \n For each of these single line calls, the full stack of NSFetchRequest, NSSortDescriptors and a simple default error handling scheme (ie. logging to the console) is created.\n \n #### Customizing the Request\n \n-\tNSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", departments];\n+```objective-c\n+NSPredicate *peopleFilter = [NSPredicate predicateWithFormat:@\"Department IN %@\", departments];\n \n-\tNSFetchRequest *peopleRequest = [Person MR_requestAllWithPredicate:peopleFilter];\n-\t[peopleRequest setReturnsDistinctResults:NO];\n-\t[peopleRequest setReturnPropertiesNamed:[NSArray arrayWithObjects:@\"FirstName\", @\"LastName\", nil]];\n-\t...\n+NSFetchRequest *peopleRequest = [Person MR_requestAllWithPredicate:peopleFilter];\n+[peopleRequest setReturnsDistinctResults:NO];\n+[peopleRequest setReturnPropertiesNamed:@[@\"FirstName\", @\"LastName\"]];\n \n-\tNSArray *people = [Person MR_executeFetchRequest:peopleRequest];\n+NSArray *people = [Person MR_executeFetchRequest:peopleRequest];\n+```\n \n #### Find the number of entities\n \n-You can also perform a count of entities in your Store, that will be performed on the Store\n+You can also perform a count of all entities of a specific type in your Persistent Store:\n \n-\tNSNumber *count = [Person MR_numberOfEntities];\n+```objective-c\n+NSNumber *count = [Person MR_numberOfEntities];\n+```\n \n Or, if you're looking for a count of entities based on a predicate or some filter:\n \n-\tNSNumber *count = [Person MR_numberOfEntitiesWithPredicate:...];\n-\t\n-There are also counterpart methods which return NSUInteger rather than NSNumbers:\n+```objective-c\n+NSNumber *count = [Person MR_numberOfEntitiesWithPredicate:...];\n+```\n \n-* countOfEntities\n-* countOfEntitiesWithContext:(NSManagedObjectContext *)\n-* countOfEntitiesWithPredicate:(NSPredicate *)\n-* countOfEntitiesWithPredicate:(NSPredicate *) inContext:(NSManagedObjectContext *)\n+There are also complementary methods which return `NSUInteger` rather than `NSNumber` instances:\n+\n+* `MR_countOfEntities`\n+* `MR_countOfEntitiesWithContext:(NSManagedObjectContext *)context`\n+* `MR_countOfEntitiesWithPredicate:(NSPredicate *)predicate`\n+* `MR_countOfEntitiesWithPredicate:(NSPredicate *)predicatecontext inContext:(NSManagedObjectContext *)`\n \n #### Aggregate Operations\n \n-    NSPredicate *predicate = [NSPredicate predicateWithFormat:@\"diaryEntry.date == %@\", today];\n-    int totalFat = [[CTFoodDiaryEntry MR_aggregateOperation:@\"sum:\" onAttribute:@\"fatColories\" withPredicate:predicate] intValue];\n-    int fattest  = [[CTFoodDiaryEntry MR_aggregateOperation:@\"max:\" onAttribute:@\"fatColories\" withPredicate:predicate] intValue];\n-    \n+```objective-c\n+NSInteger totalFat = [[CTFoodDiaryEntry MR_aggregateOperation:@\"sum:\" onAttribute:@\"fatCalories\" withPredicate:predicate] integerValue];\n+NSInteger fattest  = [[CTFoodDiaryEntry MR_aggregateOperation:@\"max:\" onAttribute:@\"fatCalories\" withPredicate:predicate] integerValue];\n+NSArray *caloriesByMonth = [CTFoodDiaryEntry MR_aggregateOperation:@\"sum:\" onAttribute:@\"fatCalories\" withPredicate:predicate groupBy:@\"month\"];\n+```\n+\n #### Finding from a different context\n \n All find, fetch, and request methods have an inContext: method parameter\n \n-\tNSManagedObjectContext *someOtherContext = ...;\n-\n-\tNSArray *peopleFromAnotherContext = [Person MR_findAllInContext:someOtherContext];\n+```objective-c\n+NSArray *peopleFromAnotherContext = [Person MR_findAllInContext:someOtherContext];\n \n-\t...\n-\n-\tPerson *personFromContext = [Person MR_findFirstByAttribute:@\"lastName\" withValue:@\"Gump\" inContext:someOtherContext];\n-\n-\t...\n-\n-\tNSUInteger count = [Person MR_numberOfEntitiesWithContext:someOtherContext];\n+Person *personFromContext = [Person MR_findFirstByAttribute:@\"lastName\" withValue:@\"Gump\" inContext:someOtherContext];\n \n+NSUInteger count = [Person MR_numberOfEntitiesWithContext:someOtherContext];\n+```\n \n ## Creating new Entities\n \n When you need to create a new instance of an Entity, use:\n \n-\tPerson *myNewPersonInstance = [Person MR_createEntity];\n+```objective-c\n+Person *myPerson = [Person MR_createEntity];\n+```\n \n-or, to specify a context:\n-\n-\tNSManagedObjectContext *otherContext = ...;\n-\n-\tPerson *myPerson = [Person MR_createInContext:otherContext];\n+or, to specify which context the entity is inserted into:\n \n+```objective-c\n+Person *myPerson = [Person MR_createEntityInContext:otherContext];\n+```\n \n ## Deleting Entities\n \n To delete a single entity:\n \n-\tPerson *p = ...;\n-\t[p  MR_deleteEntity];\n-\n-or, to specify a context:\n+```objective-c\n+[myPerson MR_deleteEntity];\n+```\n \n-\tNSManagedObjectContext *otherContext = ...;\n-\tPerson *deleteMe = ...;\n+or, to delete the entity from a specific context:\n \n-\t[deleteMe MR_deleteInContext:otherContext];\n+```objective-c\n+[myPerson MR_deleteEntityInContext:otherContext];\n+```\n \n There is no delete *All Entities* or *truncate* operation in core data, so one is provided for you with Active Record for Core Data:\n \n-\t[Person MR_truncateAll];\n+```objective-c\n+[Person MR_truncateAll];\n+```\n \n-or, with a specific context:\n+or, to truncate all entities in a specific context:\n \n-\tNSManagedObjectContext *otherContext = ...;\n-\t[Person MR_truncateAllInContext:otherContext];\n\\ No newline at end of file\n+```objective-c\n+[Person MR_truncateAllInContext:otherContext];\n+```
